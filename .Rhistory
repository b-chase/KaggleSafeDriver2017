d1 <- xgb.DMatrix(x.train[itrain=="train",], label=y.train[itrain=="train"]) # training frame
d2 <- xgb.DMatrix(x.train[itrain=="val",], label=y.train[itrain=="val"]) # validation frame
d3 <- xgb.DMatrix(x.train[itrain=="test",], label=y.train[itrain=="test"]) # test frame
#runlabel=paste0(basefile, '_run0')
# params from https://www.kaggle.com/abhilashawasthi/forza-baseline Private Score 0.28164 Public Score 0.27999
xgb.param1 <- list( eta=0.02, max_depth=4, subsample=0.9, colsample_bytree=0.9, objective='binary:logistic', seed=99, silent=T )
# run1: try params from my tuning (see SafeDriver2.R for my tuning experiments)
#runlabel=paste0(basefile, '_run1')
#xgb.param1 <- list( eta=0.03, max_depth=5, subsample=0.3, colsample_bytree=0.9, gamma=8, min_child_weight=120, objective='binary:logistic', seed=99, silent=T )
# run2: try smote (doesn't do anything here?) list( sample='smote', ...)
# forza: Best iteration: [759] train-gini:0.349262 valid-gini:0.277611
# run0 from raw data: Best iteration: [685]   train-ngini:0.345306    valid-ngini:0.278298
# run1: 200s, Best iteration: [667]   train-ngini:0.326298    valid-ngini:0.278089
# run2: 186s, Best iteration: [685]   train-ngini:0.345306    valid-ngini:0.278298
watchlist <- list(train=d1, val=d2)
system.time(mx1 <- xgb.train( xgb.param1, d1, nrounds=5000, feval=NormalizedGiniXGB, maximize=T, watchlist=watchlist, early_stopping_rounds=100, print_every_n=100 )) #verbose_eval=100 ))
pred.out <- predict(mx1, d3)
pred.acc <- NormalizedGiniXGB(pred.out, d3)
print(pred.acc)
system.time(mx3 <- xgb.train( xgb.param1, d1, nrounds=5000, feval=prAUC, maximize=T, watchlist=watchlist, early_stopping_rounds=100, print_every_n=100 )) #verbose_eval=100 ))
pred.out <- predict(mx2, d3)
pred.acc <- prAUC(pred.out, d3, plot_out = TRUE)
print(pred.acc)
system.time(mx2 <- xgb.train( xgb.param1, d1, nrounds=5000, feval=rocAUC, maximize=T, watchlist=watchlist, early_stopping_rounds=100, print_every_n=50 )) #verbose_eval=100 ))
pred.out <- predict(mx2, d3)
pred.acc <- rocAUC(pred.out, d3, plot_out = TRUE)
print(pred.acc)
system.time(mx3 <- xgb.train( xgb.param1, d1, nrounds=5000, feval=prAUC, maximize=T, watchlist=watchlist, early_stopping_rounds=100, print_every_n=100 )) #verbose_eval=100 ))
pred.out <- predict(mx2, d3)
pred.acc <- prAUC(pred.out, d3, plot_out = TRUE)
print(pred.acc)
prAUC(real.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC(runif(real.y), real.y, plot_out = TRUE, xgb=FALSE)
rocAUC(runif(real.y), real.y, plot_out = TRUE, xgb=FALSE)
rocAUC(real.y, real.y, plot_out = TRUE, xgb=FALSE)
rocAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
plot(real.y, fake.y)
# test prAUC
real.y <- rbinom(1000, 1, 0.2)
hist(real.y)
guess.y <- (real.y + runif(real.y))/2
plot(real.y, guess.y)
hist(guess.y)
hist(guess.y - real.y)
hist(guess.y)
guess.y <- (real.y + 2* runif(real.y))/3
plot(guess.y, real.y)
guess.y <- (real.y + 1.5*runif(real.y))/2
rocAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
y_true <- y_true[order(as.numeric(y_pred), decreasing=TRUE)]
print(cbind(y_true, y_pred))
true_pos <- cumsum(y_true)
false_pos <- cumsum(!y_true)
#true_neg <- sum(!y_true) - false_pos   # not needed
false_neg <- sum(y_true) - cumsum(y_true)
precision <- true_pos / (true_pos + false_pos) # true positive over all marked positive
recall <- true_pos / (true_pos + false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))[order(y_pred, decreasing = TRUE),]
true_pos <- cumsum(res$y_true)
false_pos <- cumsum(!res$y_true)
false_neg <- sum(res$y_true) - true_pos
precision <- true_pos / (true_pos + false_pos) # true positive over all marked positive
recall <- true_pos / (true_pos + false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
# test prAUC
real.y <- rbinom(1000, 1, 0.3)
guess.y <- (real.y + 1.5*runif(real.y))/2
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
# test prAUC
real.y <- rbinom(1000, 1, 0.5)
guess.y <- (real.y + 1.5*runif(real.y))/2
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
res <- data.frame(y_true=real.y, y_pred=guess.y)
res
res[order(y_pred, decreasing=FALSE)]
res[order(res$y_pred, decreasing=FALSE)]
res <- data.frame(y_true=real.y, y_pred=guess.y)
res[order(res$y_pred, decreasing=FALSE)]
res[order(res$y_pred, decreasing=FALSE),]
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))[order(y_pred, decreasing = FALSE),]
true_pos <- cumsum(res$y_true)
false_pos <- cumsum(!res$y_true)
false_neg <- sum(res$y_true) - true_pos
precision <- true_pos / (true_pos + false_pos) # true positive over all marked positive
recall <- true_pos / (true_pos + false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
# test prAUC
real.y <- rbinom(1000, 1, 0.5)
guess.y <- (real.y + 1.5*runif(real.y))/2
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
# test prAUC
real.y <- rbinom(1000, 1, 0.2)
guess.y <- (real.y + 1.5*runif(real.y))/2
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
# test prAUC
real.y <- rbinom(1000, 1, 0.2)
guess.y <- (real.y + 1*runif(real.y))/2
guess.y <- (real.y + 1*runif(real.y))/1.9
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
# test prAUC
real.y <- rbinom(1000, 1, 0.2)
guess.y <- (real.y + 1*runif(real.y))/1.9
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
res <- data.frame(y_true=real.y, y_pred=guess.y)
res[order(res$y_pred, decreasing=FALSE),]
res <- res[order(res$y_pred, decreasing=FALSE),]
res$true_pos <- cumsum(res$y_true)
res
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
res <- data.frame(y_true=real.y, y_pred=guess.y)
res <- res[order(res$y_pred, decreasing=FALSE),]
res$true_pos <- cumsum(res$y_true)
res
res$true_pos <- cumsum(res$y_true)
res$true_neg <- cumsum(!res$y_true)
res
res$false_pos <- sum(!res$y_true) - true_neg
res
res$false_pos <- sum(!res$y_true) - res$true_neg
res
res$false_neg <- sum(!res$y_true) - res$true_neg
res
res$false_pos <- seq_along(res$y_true) - res$true_pos
res
res$false_pos <- seq_along(res$y_true) - res$true_pos - 1
res$false_neg <- nrow(res) - seq_along(res$y_true) - res$true_neg - 1
res
res$true_pos <- cumsum(res$y_true)
res$true_neg <- nrow(res) - cumsum(!res$y_true)
res$false_pos <- seq_along(res$y_true) - res$true_pos - 1
res$false_neg <- nrow(res) - seq_along(res$y_true) - res$true_neg - 1
res
res$true_pos <- cumsum(res$y_true)
res$true_neg <- nrow(res) - cumsum(!res$y_true)
res$false_pos <- seq_along(res$y_true) - res$true_pos
res$false_neg <- nrow(res) - seq_along(res$y_true) - res$true_neg
res
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))[order(y_pred, decreasing = FALSE),]
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- n - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- true_pos / (true_pos + false_pos) # true positive over all marked positive
recall <- true_pos / (true_pos + false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
# test prAUC
real.y <- rbinom(1000, 1, 0.2)
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))[order(y_pred, decreasing = FALSE),]
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- n - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
# test prAUC
real.y <- rbinom(1000, 1, 0.2)
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
res <- data.frame(y_true=real.y, y_pred=guess.y)
res <- res[order(res$y_pred, decreasing=FALSE),]
res <- data.frame(y_true=real.y, y_pred=guess.y)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- n - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
precision
summary(precision)
summary(recall)
res
res$true_pos <- cumsum(res$y_true)
res$true_neg <- cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
res
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
res
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
summary(precision)
summary(recall)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))[order(y_pred, decreasing = FALSE),]
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
# test prAUC
real.y <- rbinom(1000, 1, 0.2)
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
plot(recall, precision)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
res
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
summary(precision)
summary(recall)
plot(recall, precision)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))[order(y_pred, decreasing = FALSE),]
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
if (plot_out) {
plot(recall, precision)
}
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
return(list(metric="PR_AUC", value=AUC))
}
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
plot(recall, precision)
res <- data.frame(y_true=real.y, y_pred=guess.y)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
res
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
plot(recall, precision)
# test prAUC
real.y <- rbinom(1000, 1, 0.5)
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
res <- data.frame(y_true=real.y, y_pred=guess.y)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
res
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
plot(recall, precision)
res$precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
res$recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
res
plot(recall, precision)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true = getinfo(y_train, 'label')} else {y_true = y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
if (plot_out) {
plot(recall, precision)
}
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
return(list(metric="PR_AUC", value=AUC))
}
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
res <- data.frame(y_true=real.y, y_pred=guess.y)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
res$precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
res$recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
res
plot(recall, precision)
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true <- getinfo(y_train, 'label')} else {y_true <- y_train}
res <- data.frame(y_true=as.numeric(y_true), y_pred=as.numeric(y_pred))
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
if (plot_out) {
plot(recall, precision)
}
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
return(list(metric="PR_AUC", value=AUC))
}
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true <- getinfo(y_train, 'label')} else {y_true <- y_train}
res <- data.frame(y_true=y_true, y_pred=y_pred)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
if (plot_out) {
plot(recall, precision)
}
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
return(list(metric="PR_AUC", value=AUC))
}
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
res <- data.frame(y_true=real.y, y_pred=guess.y)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
plot(recall, precision)
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
AUC
plot(recall, precision)
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true <- getinfo(y_train, 'label')} else {y_true <- y_train}
res <- data.frame(y_true=y_true, y_pred=y_pred)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
return(list(metric="PR_AUC", value=AUC))
}
# test prAUC
real.y <- rbinom(1000, 1, 0.5)
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
# test prAUC
real.y <- rbinom(1000, 1, 0.5)
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true <- getinfo(y_train, 'label')} else {y_true <- y_train}
res <- data.frame(y_true=y_true, y_pred=y_pred)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
dprec <- c(diff(precision), 0)
drec <- c(diff(recall), 0)
AUC <- sum(precision*drec) + sum(-dprec*drec)/2
if (plot_out) {
plot(recall, precision)
}
print(res)
return(list(metric="PR_AUC", value=AUC, table="res"))
}
prAUC <- function(y_pred, y_train, plot_out=FALSE, xgb=TRUE) {
if (xgb) {y_true <- getinfo(y_train, 'label')} else {y_true <- y_train}
res <- data.frame(y_true=y_true, y_pred=y_pred)
res <- res[order(res$y_pred, decreasing=FALSE),]
n <- nrow(res)
res$true_pos <- cumsum(res$y_true)
res$true_neg <- sum(!res$y_true) - cumsum(!res$y_true)
res$false_pos <- seq(n) - res$true_pos
res$false_neg <- n - seq(n) - res$true_neg
res$precision <- res$true_pos / (res$true_pos + res$false_pos) # true positive over all marked positive
res$recall <- res$true_pos / (res$true_pos + res$false_neg) # true positive over all actual positive
res$dprec <- c(diff(res$precision), 0)
res$drec <- c(diff(res$recall), 0)
AUC <- sum(res$precision*res$drec) + sum(-res$dprec*res$drec)/2
if (plot_out) {
plot(res$recall, res$precision)
}
print(res)
return(list(metric="PR_AUC", value=AUC, table="res"))
}
# test prAUC
real.y <- rbinom(1000, 1, 0.5)
guess.y <- (real.y + 2*runif(real.y))/2.95
prAUC(fake.y, real.y, plot_out = TRUE, xgb=FALSE)
prAUC(guess.y, real.y, plot_out = TRUE, xgb=FALSE)
